using JuMP, Gurobi # Add Gurobi here if not implicitly loaded via JuMP

export solve_and_extract_results

# Helper function to solve the model and extract results
function solve_and_extract_results(scuc::Model, NT, NG, ND, NC, NW, NS, ND2, scenarios_prob, eachslope, refcost, config_param)
	println("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++")
	println("Step-4: starting Gurobi solver")
	optimize!(scuc)
	println("Step-5: Gurobi solver finished")
	println("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++")

	# Check termination status
	status = termination_status(scuc)
	println("Termination Status: ", status)

	if status == MOI.OPTIMAL || status == MOI.LOCALLY_SOLVED || status == MOI.TIME_LIMIT ||
	   status == MOI.OBJECTIVE_LIMIT # Added OBJECTIVE_LIMIT as acceptable status
		println("Acceptable solution found (Status: $status).")

		# Extract values
		  x‚ÇÄ      = JuMP.value.(scuc[:x])
		  u‚ÇÄ      = JuMP.value.(scuc[:u])
		  v‚ÇÄ      = JuMP.value.(scuc[:v])
		  pg‚ÇÄ     = JuMP.value.(scuc[:pg‚ÇÄ])
		  pg‚Çñ     = JuMP.value.(scuc[:pg‚Çñ])
		  su_cost = JuMP.value.(scuc[:su‚ÇÄ])
		  sd_cost = JuMP.value.(scuc[:sd‚ÇÄ])
		  seq_sr‚Å∫ = JuMP.value.(scuc[:sr‚Å∫])
		  seq_sr‚Åª = JuMP.value.(scuc[:sr‚Åª])
		  p·µ®      = JuMP.value.(scuc[:Œîpd])
		  p·µ©      = JuMP.value.(scuc[:Œîpw])
		# Œ±       = JuMP.value.(Œ±)
		# Œ≤       = JuMP.value.(Œ≤)

		# Storage results (check if NC > 0)
		pss_charge_p‚Å∫, pss_charge_p‚Åª, pss_charge_state‚Å∫, pss_charge_state‚Åª, pss_charge_cycle‚Å∫, pss_charge_cycle‚Åª, pss_Qc = ntuple(
			_ -> nothing, 7)
		if NC > 0
			pss_charge_p‚Å∫     = JuMP.value.(scuc[:pc‚Å∫])
			pss_charge_p‚Åª     = JuMP.value.(scuc[:pc‚Åª])
			pss_charge_state‚Å∫ = JuMP.value.(scuc[:Œ∫‚Å∫])
			pss_charge_state‚Åª = JuMP.value.(scuc[:Œ∫‚Åª])
			pss_charge_cycle‚Å∫ = JuMP.value.(scuc[:Œ±])
			pss_charge_cycle‚Åª = JuMP.value.(scuc[:Œ≤])
			pss_Qc            = JuMP.value.(scuc[:qc])
		end

		# Note: Calculating individual cost components (prod_cost, cr+, cr-) here from solved variables
		# requires passing parameters like eachslope, refcost, œÅ‚Å∫, œÅ‚Åª to this function.
		# The total cost is available via objective_value(scuc).
		# Removed the direct calculation here to fix syntax errors and avoid complexity.
		# These can be recalculated outside if needed, using the returned solved variables.

		# Data centra results
		dc_p_res, dc_f_res ,                          dc_v¬≤_res, dc_Œª_res, dc_Œîu1_res, dc_Œîu2_res = ntuple(_ -> nothing, 6) # Initialize as nothing
		if       config_param.is_ConsiderDataCentra == 1 && ND2 > 0
		         dc_p_res                            = JuMP.value.(scuc[:dc_p])
		         dc_f_res                            = JuMP.value.(scuc[:dc_f])
		         dc_v¬≤_res                           = JuMP.value.(scuc[:dc_v¬≤])
		         dc_Œª_res                            = JuMP.value.(scuc[:dc_Œª])
		         dc_Œîu1_res                          = JuMP.value.(scuc[:dc_Œîu1])
		         dc_Œîu2_res                          = JuMP.value.(scuc[:dc_Œîu2])
		end

		# TODO -

		c‚ÇÄ = config_param.is_CoalPrice  # Base cost of coal
		p‚Çõ = scenarios_prob  # Probability of scenarios

		# Penalty coefficients for load and wind curtailment
		load_curtailment_penalty = config_param.is_LoadsCuttingCoefficient * 1e10
		wind_curtailment_penalty = config_param.is_WindsCuttingCoefficient * 1e0

		œÅ‚Å∫ = c‚ÇÄ * 2
		œÅ‚Åª = c‚ÇÄ * 2

		prod_cost = p‚Çõ *
					c‚ÇÄ *
					(
						sum(
						sum(
							sum(sum(pg‚Çñ[i + (s - 1) * NG, t, :] .* eachslope[:, i] for t in 1:NT))
						for s in 1    : NS
						)   for i in 1: NG
					) + sum(sum(sum(x‚ÇÄ[:, t] .* refcost[:, 1] for t in 1:NT)) for s in 1:NS)
					)
		cr‚Å∫ = p‚Çõ *
			  c‚ÇÄ *
			  sum(
				  sum(sum(œÅ‚Å∫ * seq_sr‚Å∫[i + (s - 1) * NG, t] for i in 1:NG) for t in 1:NT)
					for s in 1: NS
			  )
		cr‚Åª = p‚Çõ *
			  c‚ÇÄ *
			  sum(
				  sum(sum(œÅ‚Å∫ * seq_sr‚Åª[i + (s - 1) * NG, t] for i in 1:NG) for t in 1:NT)
					for s in 1: NS
			  )
		seq_sr‚Å∫   = p‚Çõ * c‚ÇÄ * sum(œÅ‚Å∫ * seq_sr‚Å∫[i, :] for i in 1:NG)
		seq_sr‚Åª   = p‚Çõ * c‚ÇÄ * sum(œÅ‚Å∫ * seq_sr‚Åª[i, :] for i in 1:NG)
		ùúüpd      = p‚Çõ * sum(sum(sum(p·µ®[(1 + (s - 1) * ND):(s * ND), t]) for t in 1:NT) for s in 1:NS)
		ùúüpw      = p‚Çõ * sum(sum(sum(p·µ©[(1 + (s - 1) * NW):(s * NW), t]) for t in 1:NT) for s in 1:NS)
		str       = zeros(1, 7)
		str[1, 1] = sum(su_cost) * 10
		str[1, 2] = sum(sd_cost) * 10
		str[1, 3] = prod_cost
		str[1, 4] = cr‚Å∫
		str[1, 5] = cr‚Åª
		str[1, 6] = ùúüpd
		str[1, 7] = ùúüpw

		# Set output directory for results
  # output_dir = joinpath(pwd(), "output")
    output_dir = "/Users/yuanyiping/Documents/GitHub/module_unitcommitment/output/"

		# Create directory if it doesn't exist
		try
			if !isdir(output_dir)
				mkdir(output_dir)
			end

			# Open output file for writing results
			output_file = joinpath(output_dir, "Bench_calculation_result.txt")
			open(output_file, "w") do io
				writedlm(io, [" "])
				writedlm(io, ["su_cost" "sd_cost" "prod_cost" "cr‚Å∫" "cr‚Åª" "ùúüpd" "ùúüpw"], '\t')
				writedlm(io, str, '\t')
				writedlm(io, [" "])
				writedlm(io, ["list 1: units stutup/down states"])
				writedlm(io, x‚ÇÄ, '\t')
				writedlm(io, [" "])
				writedlm(io, ["list 2: units dispatching power in scenario NO.1"])
				writedlm(io, pg‚ÇÄ[1:NG, 1:NT], '\t')
				writedlm(io, [" "])
				writedlm(io, ["list 3: spolied wind power"])
				writedlm(io, p·µ©[1:NW, 1:NT], '\t')
				writedlm(io, [" "])
				writedlm(io, ["list 4: forced load curtailments"])
				writedlm(io, p·µ®[1:ND, 1:NT], '\t')
				writedlm(io, [" "])
				writedlm(io, ["list 5: pss charge state"])
				writedlm(io, pss_charge_state‚Å∫[1:NC, 1:NT], '\t')
				writedlm(io, [" "])
				writedlm(io, ["list 6: pss discharge state"])
				writedlm(io, pss_charge_state‚Åª[1:NC, 1:NT], '\t')
				writedlm(io, [" "])
				writedlm(io, ["list 7: pss charge power"])
				writedlm(io, pss_charge_p‚Å∫[1:NC, 1:NT], '\t')
				writedlm(io, [" "])
				writedlm(io, ["list 8: pss discharge power"])
				writedlm(io, pss_charge_p‚Åª[1:NC, 1:NT], '\t')
				writedlm(io, [" "])
				writedlm(io, ["list 9: pss strored energy"])
				writedlm(io, pss_Qc[1:NC, 1:NT], '\t')
				writedlm(io, [" "])
				writedlm(io, ["list 10: sr‚Å∫"])
				writedlm(io, seq_sr‚Å∫[1:NG, 1:NT], '\t')
				writedlm(io, [" "])
				writedlm(io, ["list 11: sr‚Åª"])
				writedlm(io, seq_sr‚Åª[1:NG, 1:NT], '\t')
				# writedlm(io, [" "])
				# writedlm(io, ["list 12: Œ±"])
				# writedlm(io, Œ±[1:NC, 1:NT], '\t')
				# writedlm(io, [" "])
				# writedlm(io, ["list 13: Œ≤"])
				# writedlm(io, Œ≤[1:NC, 1:NT], '\t')
			end
			println("The calculation result has been saved to: $output_file")
			println("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++")

			# Open output file for writing results
			output_file = joinpath(output_dir, "Bench_datacentra_result.txt")
			open(output_file, "w") do io
				writedlm(io, [" "])
				writedlm(io, ["list 1: dc_p"], '\t')
				writedlm(io, dc_p_res[1:(ND2 * NS), 1:NT], '\t')
				writedlm(io, [" "])
				writedlm(io, ["list 2: dc_f"])
				writedlm(io, dc_f_res[1:(ND2 * NS), 1:NT], '\t')
				writedlm(io, [" "])
				writedlm(io, ["list 3: dc_v¬≤"])
				writedlm(io, dc_v¬≤_res[1:(ND2 * NS), 1:NT], '\t')
				writedlm(io, [" "])
				writedlm(io, ["list 4: dc_Œª"])
				writedlm(io, dc_Œª_res[1:(ND2 * NS), 1:NT], '\t')
				writedlm(io, [" "])
				writedlm(io, ["list 5: dc_Œîu1"])
				writedlm(io, dc_Œîu1_res[1:(ND2 * NS), 1:NT], '\t')
				writedlm(io, [" "])
				writedlm(io, ["list 6: dc_Œîu2"])
				writedlm(io, dc_Œîu2_res[1:(ND2 * NS), 1:NT], '\t')
			end
			println("The calculation result has been saved to: $output_file")
			println("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++")

			# Open output file for csv writing results
			# output_dir = "D:/GithubClonefiles/datacentra_unitcommitment/output/data_centra/"

			# s                   = 1
			# @show data_to_write = [
			# 	("dc_Œîu2.csv", JuMP.value.(dc_Œîu2[1:(ND2), 1:NT])),
			# 	("dc_Œîu1.csv", JuMP.value.(dc_Œîu1[1:(ND2), 1:NT])),
			# 	("dc_v¬≤.csv", JuMP.value.(dc_v¬≤[1:(ND2), 1:NT])),
			# 	("dc_Œª.csv", JuMP.value.(dc_Œª[1:(ND2), 1:NT])),
			# 	("dc_f.csv", JuMP.value.(dc_f[1:(ND2), 1:NT])),
			# 	("dc_p.csv", JuMP.value.(dc_p[1:(ND2), 1:NT])),
			# 	("dc_debug_tasks_1.csv",
			# 		(JuMP.value.(dc_Œª[((s - 1) * ND2 + 1):(s * ND2), ((1 - 1) * iter_block + 1):(1 * iter_block)]))),
			# 	("dc_debug_tasks_2.csv",
			# 		(JuMP.value.(dc_Œª[((s - 1) * ND2 + 1):(s * ND2), ((2 - 1) * iter_block + 1):(2 * iter_block)]))),
			# 	("dc_debug_tasks_3.csv",
			# 		(JuMP.value.(dc_Œª[((s - 1) * ND2 + 1):(s * ND2), ((3 - 1) * iter_block + 1):(3 * iter_block)]))),
			# 	("dc_debug_tasks_4.csv",
			# 		(JuMP.value.(dc_Œª[((s - 1) * ND2 + 1):(s * ND2), ((4 - 1) * iter_block + 1):(4 * iter_block)]))),
			# 	("dc_debug_tasks_5.csv",
			# 		(JuMP.value.(dc_Œª[((s - 1) * ND2 + 1):(s * ND2), ((5 - 1) * iter_block + 1):(5 * iter_block)]))),
			# 	("dc_debug_tasks_6.csv",
			# 		(JuMP.value.(dc_Œª[((s - 1) * ND2 + 1):(s * ND2), ((6 - 1) * iter_block + 1):(6 * iter_block)])))
			# ]

			# @constraint(scuc, [s = 1:NS, t = 1:NT, iter = 1:iter_num],
			# 	sum(dc_Œª[((s - 1) * ND2 + 1):(s * ND2),
			# 		((iter - 1) * iter_block + 1):(iter * iter_block)]).<=(1 + coeff) * sum(DataCentras.Œª) .* DataCentras.computational_power_tasks[((iter - 1) * iter_block + 1):(iter * iter_block)])

			# iter = 1
			# println("===============================================================================")
			# @show (1 + coeff) * sum(DataCentras.Œª) * iter_block .*
			# 	  sum(DataCentras.computational_power_tasks[((iter - 1) * iter_block + 1):(iter * iter_block)])
			# @show (1 - coeff) * sum(DataCentras.Œª) * iter_block .*
			# 	  sum(DataCentras.computational_power_tasks[((iter - 1) * iter_block + 1):(iter * iter_block)])
			# @show sum(JuMP.value.(dc_Œª[
			# 	((s - 1) * ND2 + 1):(s * ND2), ((iter - 1) * iter_block + 1):(iter * iter_block)])) .*
			# 	  sum(DataCentras.computational_power_tasks[((iter - 1) * iter_block + 1):(iter * iter_block)])

			# println("===============================================================================")

			# for (filename, data) in data_to_write
			# filepath = joinpath(output_dir, filename)
			# 	try
			# 		CSV.write(filepath, DataFrame(data, :auto))
			# 		println("Successfully wrote to $filepath")
			# 	catch e
			# @error "Failed to write to $filepath" exception = (e, catch_backtrace())
			# 	end
			# end

		catch e
			println("Error writing results to file: $e")
		end

		  #   =================================
		# res                                 = JuMP.value
		println("Step-6: record datas")
		# Note: Original function returned specific variables directly.
		# Adjust the return statement based on what the caller function `mainfun.jl` expects.
		# Returning a dictionary or a custom struct might be cleaner.
		results = Dict(
			"x‚ÇÄ"                => x‚ÇÄ,
			"u‚ÇÄ"                => u‚ÇÄ,
			"v‚ÇÄ"                => v‚ÇÄ,
			"p‚ÇÄ"                => pg‚ÇÄ,
			"p‚Çñ"                => pg‚Çñ,
			"su_cost"           => su_cost,
			"sd_cost"           => sd_cost,
			"seq_sr‚Å∫"           => seq_sr‚Å∫,
			"seq_sr‚Åª"           => seq_sr‚Åª,
			"p·µ®"                => p·µ®,
			"p·µ©"                => p·µ©,
			"pss_charge_p‚Å∫"     => pss_charge_p‚Å∫,
			"pss_charge_p‚Åª"     => pss_charge_p‚Åª,
			"pss_charge_state‚Å∫" => pss_charge_state‚Å∫,
			"pss_charge_state‚Åª" => pss_charge_state‚Åª,
			"pss_charge_cycle‚Å∫" => pss_charge_cycle‚Å∫,
			"pss_charge_cycle‚Åª" => pss_charge_cycle‚Åª,
			"pss_Qc"            => pss_Qc,

			# "prod_cost" => prod_cost,
			# "cr‚Å∫"       => cr‚Å∫,
			# "cr‚Åª"       => cr‚Åª,       # Removed as they are not calculated here anymore

			"objective_value" => objective_value(scuc),
			"solve_time"      => solve_time(scuc),
			"status"          => status,

			# Add data centra results to dictionary
			"dc_p"   => dc_p_res,
			"dc_f"   => dc_f_res,
			"dc_v¬≤"  => dc_v¬≤_res,
			"dc_Œª"   => dc_Œª_res,
			"dc_Œîu1" => dc_Œîu1_res,
			"dc_Œîu2" => dc_Œîu2_res
		)
		return results

	else # This else corresponds to the 'if status == MOI.OPTIMAL...'
		println("Solver did not find an acceptable solution. Status: ", status)
		# Return empty or indicate failure
		return nothing # Or throw an error
	end
end # End of solve_and_extract_results function
