function get_dual_constrs_coefficient(current_model::SCUC_Model, constrs, opti_termination_status)
	dual_results = Dict{Symbol, dual_subprob_expr_coefficient}()

	for (key, value) in constrs
		constr_type_str = string(typeof(value))
		if occursin("EqualTo", constr_type_str)
			rhs_constr = get_equal_to_constr_rhs(current_model.model, value)
			operator_ass = ones(length(rhs_constr))
		elseif occursin("LessThan", constr_type_str)
			rhs_constr = get_smaller_than_constr_rhs(current_model.model, value)
			operator_ass = ones(length(rhs_constr)) .* -1.0
		elseif occursin("GreaterThan", constr_type_str)
			rhs_constr = get_greater_than_constr_rhs(current_model.model, value)
			operator_ass = ones(length(rhs_constr))
		end

		x_coeff, x_sort_order = get_x_coeff_vectors_from_constr(key, current_model.model, value, NT, NG)
		u_coeff, u_sort_order = get_u_coeff_vectors_from_constr(key, current_model.model, value, NT, NG)
		v_coeff, v_sort_order = get_v_coeff_vectors_from_constr(key, current_model.model, value, NT, NG)

		x_coeff = x_coeff[:, 1]
        u_coeff = u_coeff[:, 1]
        v_coeff = v_coeff[:, 1]

		#check order is valid
		# @show x_sort_order, u_sort_order, v_sort_order

		@assert length(Set([x_sort_order, u_sort_order, v_sort_order])) <= 2

		if opti_termination_status == true
			dual_coeff = dual.(value) #strong convex
		else
			dual_coeff = shadow_price.(value) #farkas convex
		end

		dual_results[key] = build_dual_cuts_expr_coefficient(
			rhs = rhs_constr,
			x = x_coeff,
			u = u_coeff,
			v = v_coeff,
			x_sort_order = Int64(x_sort_order),
			u_sort_order = Int64(u_sort_order),
			v_sort_order = Int64(v_sort_order),
			dual_coeffVector = dual_coeff,
			operator_associativity = operator_ass
		)
	end

	return dual_results
end
